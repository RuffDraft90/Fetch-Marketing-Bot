"""
Google Docs Service
==================
Service for creating and managing Google Docs briefs for campaigns
"""

import os
import logging
from typing import Dict, Optional, Any
from datetime import datetime

logger = logging.getLogger(__name__)

class GoogleDocsService:
    """Service for Google Docs integration with campaign brief generation."""
    
    def __init__(self):
        """Initialize Google Docs service."""
        self.credentials_file = os.path.join(os.path.dirname(__file__), 'google_credentials.json')
        self.service = None
        
    async def create_campaign_brief(self, campaign_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """
        Create a campaign brief document in Google Docs.
        
        Args:
            campaign_data: Campaign details including event_name, dates, location, goals, deliverables
            
        Returns:
            Dict with document info or None if failed
        """
        try:
            campaign_name = campaign_data.get('event_name', 'Untitled Campaign')
            event_dates = campaign_data.get('event_dates', 'TBD')
            location = campaign_data.get('location', 'TBD')
            goals = campaign_data.get('campaign_goals', '')
            deliverables = campaign_data.get('deliverables', '')
            requestor = campaign_data.get('requestor', 'Unknown')
            
            logger.info(f"Creating Google Docs brief for campaign: {campaign_name}")
            
            # Generate brief content
            brief_content = self._generate_brief_content(
                campaign_name, event_dates, location, goals, deliverables, requestor
            )
            
            # Mock document creation - replace with actual Google Docs API call
            doc_id = f"doc_{hash(campaign_name) % 100000}"
            
            return {
                "doc_id": doc_id,
                "doc_url": f"https://docs.google.com/document/d/{doc_id}/edit",
                "title": f"{campaign_name} - Campaign Brief",
                "content_length": len(brief_content),
                "status": "created",
                "created_date": datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"Failed to create Google Docs brief: {e}")
            return None
    
    def _generate_brief_content(self, campaign_name: str, event_dates: str, location: str, 
                               goals: str, deliverables: str, requestor: str) -> str:
        """Generate standardized brief content."""
        
        brief_template = f"""
# {campaign_name} - Campaign Brief

**Created:** {datetime.now().strftime('%B %d, %Y')}
**Requestor:** {requestor}

---

## Event Overview

**Event Name:** {campaign_name}
**Event Dates:** {event_dates}
**Location:** {location}

---

## Campaign Details

### Campaign Goals
{goals if goals else 'To be defined'}

### Deliverables
{deliverables if deliverables else 'Standard campaign materials'}

---

## Project Timeline

### Standard Workflow
1. **Deliverable Design** (Kelly Redding)
   - Due: 2 weeks before event
   - Duration: 2-3 business days

2. **Creative Review** (Kelly Redding)
   - Due: After design completion
   - Duration: 1-2 business days

3. **EDEN Review** (Karen or Kate)
   - Due: After creative review
   - Duration: 1-2 business days

### Custom Deliverables
{self._format_custom_deliverables(deliverables) if deliverables else 'None specified'}

---

## Resources & Links

- **Monday.com Workflow:** [Link will be added automatically]
- **Google Calendar Event:** [Link will be added automatically]
- **Slack Campaign Thread:** [Link will be added automatically]

---

## Notes & Updates

_This section will be updated as the campaign progresses..._

---

*This brief was auto-generated by the Fetch Marketing Bot*
        """.strip()
        
        return brief_template
    
    def _format_custom_deliverables(self, deliverables: str) -> str:
        """Format custom deliverables into a structured list."""
        if not deliverables:
            return "None specified"
        
        items = [item.strip() for item in deliverables.split('\n') if item.strip()]
        formatted_items = []
        
        for i, item in enumerate(items, 1):
            formatted_items.append(f"{i}. **{item}**\n   - Assignee: To be determined\n   - Due: 1 week before event")
        
        return '\n'.join(formatted_items)
    
    async def update_brief_with_links(self, doc_id: str, links: Dict[str, str]) -> bool:
        """
        Update brief document with generated links.
        
        Args:
            doc_id: Google Doc ID
            links: Dictionary of resource links to add
            
        Returns:
            True if successful, False otherwise
        """
        try:
            logger.info(f"Updating brief {doc_id} with resource links")
            
            # Mock implementation - replace with actual Google Docs API call
            for link_name, url in links.items():
                logger.info(f"Added link: {link_name} -> {url}")
            
            return True
            
        except Exception as e:
            logger.error(f"Failed to update brief with links: {e}")
            return False
    
    def is_configured(self) -> bool:
        """Check if Google Docs service is properly configured."""
        return os.path.exists(self.credentials_file)

# Global instance
google_docs_service = GoogleDocsService()